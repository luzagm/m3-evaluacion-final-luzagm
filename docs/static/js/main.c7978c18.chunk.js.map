{"version":3,"sources":["images/Logo.jpg","services/fetchData.js","components/Header.js","components/CharactersCard.js","components/CharactersList.js","components/Filter.js","components/Home.js","components/Details.js","components/CharacterDetails.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchCharacters","fetch","then","response","json","Header","className","src","logo","alt","CharactersCard","props","to","characterId","characterImage","characterName","characterSpecies","role","aria-label","CharactersList","characters","length","charactersList","map","character","index","key","id","image","name","species","Filter","onChange","filterByName","type","placeholder","htmlFor","onClick","filterByType","value","Home","Details","characterStatus","characterOrigin","chapters","CharactersDetails","undefined","status","origin","episode","App","state","inputValue","radioValue","bind","renderOriginal","renderDetail","data","results","setState","ev","target","this","currentTarget","searchResult","filter","toUpperCase","includes","selectedCharacter","selectedId","parseInt","match","params","exact","path","render","React","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7978c18.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.ea729bf2.jpg\";","const url =\n  \"https://raw.githubusercontent.com/Adalab/rick-y-morty/master/data/rick-y-morty.json\";\n\nconst fetchCharacters = () => fetch(url).then(response => response.json());\n\nexport default fetchCharacters;\n","import React from \"react\";\nimport logo from \"../images/Logo.jpg\";\n\nconst Header = () => {\n  return <img className=\"header\" src={logo} alt=\"RickAndMorty\" />;\n};\n\nexport default Header;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport \"../stylesheets/App.scss\";\n\nconst CharactersCard = props => {\n  let speciesIcon = () => {\n    if (props.characterSpecies === \"Human\") {\n      return (\n        <span className=\"smile\" role=\"img\" aria-label=\"is human\">\n          🙂\n        </span>\n      );\n    } else if (props.characterSpecies === \"Alien\") {\n      return (\n        <span className=\"alien\" role=\"img\" aria-label=\"is alien\">\n          👽\n        </span>\n      );\n    } else {\n      return <strong>?</strong>;\n    }\n  };\n\n  return (\n    <li className=\"character-card\">\n      <Link\n        className=\"character-card-link\"\n        to={`/details/${props.characterId}`}\n      >\n        <img\n          className=\"character-card-image\"\n          src={`${props.characterImage}`}\n          alt={`${props.characterName}`}\n        />\n        <div className=\"character-card-info\">\n          <h3 className=\"character-card-name-title\">{props.characterName}</h3>\n          <p className=\"species-title\">{speciesIcon()}</p>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nCharactersCard.propTypes = {\n  characterId: PropTypes.number,\n  characterImage: PropTypes.string,\n  characterName: PropTypes.string,\n  characterSpecies: PropTypes.string\n};\n\nexport default CharactersCard;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CharactersCard from \"./CharactersCard\";\nimport \"../stylesheets/App.scss\";\n\nconst CharactersList = props => {\n  if (props.characters.length === 0) {\n    return (\n      <p className=\"not-found\">\n        No hay personajes que coincidan con la búsqueda\n      </p>\n    );\n  } else {\n    let charactersList = props.characters.map((character, index) => {\n      return (\n        <CharactersCard\n          key={index}\n          characterId={character.id}\n          characterImage={character.image}\n          characterName={character.name}\n          characterSpecies={character.species}\n        />\n      );\n    });\n\n    return <ul className=\"cards\">{charactersList}</ul>;\n  }\n};\n\nCharactersList.propTypes = {\n  characters: PropTypes.array\n};\n\nexport default CharactersList;\n","import React from \"react\";\nimport \"../stylesheets/App.scss\";\n\nconst Filter = props => {\n  return (\n    <form className=\"form\">\n      <div className=\"input-search\">\n        <i className=\"material-icons input-search-icon\">search</i>\n        <input\n          onChange={props.filterByName}\n          className=\"input-search-input\"\n          type=\"text\"\n          id=\"input-text\"\n          placeholder=\"Search by name\"\n        />\n      </div>\n\n      <div>\n        <label className=\"label\" htmlFor=\"Human\">\n          <input\n            onClick={props.filterByType}\n            id=\"Human\"\n            type=\"radio\"\n            value=\"Human\"\n            name=\"species\"\n          />\n          Human\n        </label>\n        <label className=\"label\" htmlFor=\"Alien\">\n          <input\n            onClick={props.filterByType}\n            id=\"Alien\"\n            type=\"radio\"\n            value=\"Alien\"\n            name=\"species\"\n          />\n          Alien\n        </label>\n      </div>\n    </form>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport CharactersList from \"./CharactersList\";\nimport Filter from \"./Filter\";\n\nimport \"../stylesheets/App.scss\";\n\nconst Home = props => {\n  return (\n    <div className=\"App\">\n      <Filter\n        filterByName={props.filterByName}\n        filterByType={props.filterByType}\n      />\n      <CharactersList characters={props.characters} />\n    </div>\n  );\n};\n\nHome.propTypes = {\n  character: PropTypes.array\n};\n\nexport default Home;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../stylesheets/App.scss\";\n\nconst Details = props => {\n  let statusIcon = () => {\n    if (props.characterStatus === \"Alive\") {\n      return (\n        <span className=\"heart\" role=\"img\" aria-label=\"is alive\">\n          ❤️\n        </span>\n      );\n    } else if (props.characterStatus === \"Dead\") {\n      return (\n        <span className=\"skull\" role=\"img\" aria-label=\"is dead\">\n          💀\n        </span>\n      );\n    } else {\n      return (\n        <span className=\"unknown\" role=\"img\" aria-label=\"unknown\">\n          ❓\n        </span>\n      );\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"card-details\">\n        <img\n          className=\"character-details-image\"\n          src={`${props.characterImage}`}\n          alt={`${props.characterName}`}\n        />\n        <div className=\"character-details\">\n          <h3 className=\"character-details-name\">{props.characterName}</h3>\n          <p className=\"character-details-status\">\n            <span className=\"bold-title\"> Status: </span>\n            {statusIcon()}\n          </p>\n          <p className=\"character-details-species\">\n            <span className=\"bold-title\"> Species: </span>\n            {props.characterSpecies}\n          </p>\n          <p className=\"character-details-origin\">\n            <span className=\"bold-title\"> Origin::</span>{\" \"}\n            {props.characterOrigin}\n          </p>\n          <p className=\"character-details-chapters\">\n            <span className=\"bold-title\"> Chapters: </span>\n            {props.chapters}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nDetails.propTypes = {\n  characterImage: PropTypes.string,\n  characterName: PropTypes.string,\n  characterSpecies: PropTypes.string,\n  characterStatus: PropTypes.string,\n  characterOrigin: PropTypes.string,\n  chapters: PropTypes.number\n};\n\nexport default Details;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Details from \"./Details\";\nimport \"../stylesheets/App.scss\";\n\nconst CharactersDetails = props => {\n  if (props.character === undefined) {\n    return <div>Cargando...</div>;\n  } else {\n    return (\n      <div className=\"details\">\n        <Link className=\"back-link\" to=\"/\">\n          <i className=\"material-icons back-icon\">fast_rewind</i> Back\n        </Link>\n        <Details\n          characterImage={props.character.image}\n          characterName={props.character.name}\n          characterSpecies={props.character.species}\n          characterStatus={props.character.status}\n          characterOrigin={props.character.origin.name}\n          chapters={props.character.episode.length}\n        />\n      </div>\n    );\n  }\n};\n\nCharactersDetails.propTypes = {\n  character: PropTypes.object\n};\n\nexport default CharactersDetails;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport fetchCharacters from \"../services/fetchData\";\nimport Header from \"./Header\";\nimport Home from \"./Home\";\nimport CharactersDetails from \"./CharacterDetails\";\nimport \"../stylesheets/App.scss\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      characters: [],\n      inputValue: \"\",\n      radioValue: \"\"\n    };\n    this.filterByName = this.filterByName.bind(this);\n    this.filterByType = this.filterByType.bind(this);\n    this.renderOriginal = this.renderOriginal.bind(this);\n    this.renderDetail = this.renderDetail.bind(this);\n  }\n\n  componentDidMount() {\n    fetchCharacters().then(data => {\n      const characters = data.results;\n      this.setState({\n        characters: characters\n      });\n    });\n  }\n\n  filterByName(ev) {\n    let inputValue = ev.target.value;\n    this.setState({\n      inputValue: inputValue\n    });\n  }\n\n  filterByType(ev) {\n    let radioValue = ev.currentTarget.value;\n    this.setState({ radioValue: radioValue });\n  }\n\n  renderOriginal() {\n    let searchResult = [];\n\n    if (this.state.inputValue) {\n      searchResult = this.state.characters.filter(character => {\n        return character.name\n          .toUpperCase()\n          .includes(this.state.inputValue.toUpperCase());\n      });\n    } else {\n      searchResult = this.state.characters.filter(character => {\n        return character.species\n          .toUpperCase()\n          .includes(this.state.radioValue.toUpperCase());\n      });\n    }\n\n    return (\n      <Home\n        characters={searchResult}\n        filterByType={this.filterByType}\n        filterByName={this.filterByName}\n      />\n    );\n  }\n\n  renderDetail(props) {\n    const selectedId = parseInt(props.match.params.id);\n    let selectedCharacter;\n    for (const character of this.state.characters) {\n      if (character.id === selectedId) {\n        selectedCharacter = character;\n      }\n    }\n    return <CharactersDetails character={selectedCharacter} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <main>\n          <Switch>\n            <Route exact path=\"/\" render={this.renderOriginal} />\n            <Route path=\"/details/:id\" render={this.renderDetail} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { HashRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}